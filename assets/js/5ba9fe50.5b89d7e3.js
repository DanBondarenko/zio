"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[71541],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>y});var n=i(67294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(i),m=r,y=c["".concat(l,".").concat(m)]||c[m]||u[m]||o;return i?n.createElement(y,a(a({ref:t},p),{},{components:i})):n.createElement(y,a({ref:t},p))}));function y(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,a[1]=s;for(var d=2;d<o;d++)a[d]=i[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},55958:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var n=i(87462),r=(i(67294),i(3905));const o={id:"index",title:"Introduction to ZIO Redis",sidebar_label:"ZIO Redis"},a=void 0,s={unversionedId:"zio-redis/index",id:"zio-redis/index",title:"Introduction to ZIO Redis",description:"ZIO Redis is a ZIO native Redis client.",source:"@site/docs/zio-redis/index.md",sourceDirName:"zio-redis",slug:"/zio-redis/",permalink:"/zio-redis/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-redis/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO Redis",sidebar_label:"ZIO Redis"},sidebar:"ecosystem-sidebar",previous:{title:"How to Contribute?",permalink:"/zio-quill/how-to-contribute"},next:{title:"ZIO Redis",permalink:"/zio-redis/"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"Testing",id:"testing",level:2},{value:"Resources",id:"resources",level:2}],p={toc:d},c="wrapper";function u(e){let{components:t,...i}=e;return(0,r.kt)(c,(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-redis"},"ZIO Redis")," is a ZIO native Redis client."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zio/zio/wiki/Project-Stages"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Project%20Stage-Experimental-yellowgreen.svg",alt:"Experimental"}))," ",(0,r.kt)("img",{parentName:"p",src:"https://github.com/zio/zio-redis/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,r.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-redis_2.13/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-redis_2.13.svg?label=Sonatype%20Release",alt:"Sonatype Releases"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-redis_2.13/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-redis_2.13.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://javadoc.io/doc/dev.zio/zio-redis-docs_2.13"},(0,r.kt)("img",{parentName:"a",src:"https://javadoc.io/badge2/dev.zio/zio-redis-docs_2.13/javadoc.svg",alt:"javadoc"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-redis"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/stars/zio/zio-redis?style=social",alt:"ZIO Redis"}))),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"ZIO Redis is in the experimental phase of development, but its goals are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Type Safety")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Performance")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Minimum Dependency")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ZIO Native"))),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Since the ZIO Redis is in the experimental phase, it is not released yet, but we can use snapshots:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-redis" % "<version>"\n')),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"To execute our ZIO Redis effect, we should provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"RedisExecutor")," layer to that effect. To create this layer we\nshould also provide the following layers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"RedisConfig")," \u2014 Using default one, will connect to the ",(0,r.kt)("inlineCode",{parentName:"li"},"localhost:6379")," Redis instance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"BinaryCodec")," \u2014 In this example, we are going to use the built-in ",(0,r.kt)("inlineCode",{parentName:"li"},"ProtobufCodec")," codec from zio-schema project.")),(0,r.kt)("p",null,"To run this example we should put following dependencies in our ",(0,r.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies ++= Seq(\n  "dev.zio" %% "zio-redis" % "<version>",\n  "dev.zio" %% "zio-schema-protobuf" % "0.3.0"\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.redis._\nimport zio.schema.codec._\n\nobject ZIORedisExample extends ZIOAppDefault {\n  val myApp: ZIO[Redis, RedisError, Unit] = for {\n    redis <- ZIO.service[Redis]\n    _     <- redis.set("myKey", 8L, Some(1.minutes))\n    v     <- redis.get("myKey").returning[Long]\n    _     <- Console.printLine(s"Value of myKey: $v").orDie\n    _     <- redis.hSet("myHash", ("k1", 6), ("k2", 2))\n    _     <- redis.rPush("myList", 1, 2, 3, 4)\n    _     <- redis.sAdd("mySet", "a", "b", "a", "c")\n  } yield ()\n\n  override def run = myApp.provide(\n    Redis.layer,\n    RedisExecutor.layer,\n    ZLayer.succeed(RedisConfig.Default),\n    ZLayer.succeed[BinaryCodec](ProtobufCodec)\n  )\n}\n')),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("p",null,"To test you can use the embedded redis instance by adding to your build:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'libraryDependencies := "dev.zio" %% "zio-redis-embedded" % <version>')),(0,r.kt)("p",null,"Then you can supply ",(0,r.kt)("inlineCode",{parentName:"p"},"EmbeddedRedis.layer.orDie")," as your ",(0,r.kt)("inlineCode",{parentName:"p"},"RedisConfig")," and you're good to go!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.redis._\nimport zio.schema.{DeriveSchema, Schema}\nimport zio.schema.codec.{BinaryCodec, ProtobufCodec}\nimport zio.test._\nimport zio.test.Assertion._\nimport java.util.UUID\nobject EmbeddedRedisSpec extends ZIOSpecDefault {\n  final case class Item private (id: UUID, name: String, quantity: Int)\n  object Item {\n    implicit val itemSchema: Schema[Item] = DeriveSchema.gen[Item]\n  }\n  def spec = suite("EmbeddedRedis should")(\n    test("set and get values") {\n      for {\n        redis <- ZIO.service[Redis]\n        item   = Item(UUID.randomUUID, "foo", 2)\n        _     <- redis.set(s"item.${item.id.toString}", item)\n        found <- redis.get(s"item.${item.id.toString}").returning[Item]\n      } yield assert(found)(isSome(equalTo(item)))\n    }\n  ).provideShared(\n    EmbeddedRedis.layer.orDie,\n    RedisExecutor.layer.orDie,\n    ZLayer.succeed[BinaryCodec](ProtobufCodec),\n    Redis.layer\n  ) @@ TestAspect.silentLogging\n}\n')),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=yqFt3b3RBkI"},"ZIO Redis")," by Dejan Mijic \u2014 Redis is one of the most commonly used\nin-memory data structure stores. In this talk, Dejan will introduce ZIO Redis, a purely functional, strongly typed\nclient library backed by ZIO, with excellent performance and extensive support for nearly all of Redis' features. He\nwill explain the library design using the bottom-up approach - from communication protocol to public APIs. Finally, he\nwill wrap the talk by demonstrating the client's usage and discussing its performance characteristics.")))}u.isMDXComponent=!0}}]);